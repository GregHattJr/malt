---
title: Plugins
---

The extensions directory, `ext`, is intended for plugins that extend or enhance Ark's functionality. Python modules or packages placed in this directory will be loaded automatically and can take advantage of Ark's extension hooks to inject their own code into the build process.

(Ark will also load plugins from a global extensions directory indicated by the `$ARK_EXT` environment variable if it exists.)

Ark makes three extension mechanisms available to plugins: i) event and filter [hooks](#hooks), ii) pluggable rendering and parsing [engines](#engines), and iii) WordPress-style [shortcodes](#shortcodes).



## Hooks

Ark exports a flexible framework of event and filter hooks. Plugins can extend Ark by registering callback functions on these hooks.



### Events

*Event callbacks* accept zero or more arguments depending on the specific hook. They may modify their arguments in place but have no return value.

Here's a simple event callback that prints a count of the number of pages that have been written to disk:

::: python

    import ark

    @ark.hooks.register('exit')
    def print_page_count():
        print(ark.site.written())

This callback is registered on the `exit` event hook which fires just before the application exits. (The `exit` hook can be found in the `ark/main.py` file.)



### Filters

*Filter callbacks* accept at least one argument - the value to be filtered. They may accept additional arguments depending on the specific hook. Filter callbacks modify and return the value of their first argument.

Here's a simple filter callback that changes every instance of the word "foo" in records to "bar":

::: python

    import ark

    @ark.hooks.register('record_text')
    def foo_to_bar(text, record):
        return text.replace('foo', 'bar')

This callback is registered on the `record_text` filter hook which fires just before a record's text is rendered into HTML. (The `record_text` hook can be found in the `ark/records.py` file).

Note that this hook supplies us with the `Record` instance itself as an additional argument which we here ignore.



## Engines

Ark relies for most of its functionality on a suite of pluggable rendering and parsing engines, e.g. the [Jinja][] template-engine for handling `.jinja` template files. Plugins can register support for additional rendering and parsing engines using a system of `@register` decorators.

[jinja]: http://jinja.pocoo.org



### Templates

Ark has builtin support for [Jinja][] and [Ibis][] templates. Plugins can register support for additional formats using the `@templates.register()` decorator. Template-engine callbacks are registered per file-extension, e.g.

[jinja]: http://jinja.pocoo.org
[ibis]: https://github.com/dmulholland/ibis

::: python

    import ark

    @ark.templates.register('jinja')
    def jinja_callback(page, filename):
        ...
        return html

A template-engine callback should accept a `Page` object and a template filename and return a string of HTML.



### Records

Ark has builtin support for records written in [Markdown][] and [Syntex][]. Plugins can register support for additional formats using the `@renderers.register()` decorator. Rendering-engine callbacks are registered per file-extension, e.g.

[markdown]: https://en.wikipedia.org/wiki/Markdown
[syntex]: https://github.com/dmulholland/syntex

::: python

    import ark

    @ark.renderers.register('md')
    def markdown_callback(text):
        ...
        return html

A rendering-engine callback should accept a single string argument containing plain text and return a string of HTML.



## Shortcodes

Ark has builtin support for WordPress-style [shortcodes][] with space-separated positional and keyword arguments:

    \[% tag arg1 key=arg2 %] ... \[% endtag %]

Plugins can register shortcode tags using the `@shortcodes.register()` decorator:


::: python

    import shortcodes

    @shortcodes.register('tag')
    def handler(record, content, pargs, kwargs):
        ...
        return replacement_text


Handler functions should accept four arguments:

1. The `Record` object for the source file containing the shortcode.
2. A string containing the shortcode's content, if the shortcode has block
   scope.
3. A list of positional arguments.
4. A dictionary of keyword arguments.

Positional and keyword arguments are passed as strings. The handler function itself should return a string.

Note that shortcodes are processed *before* record text is rendered into HTML.

Shortcodes are implemented via the [Shortcodes][] package. See the package documentation for further details.

[shortcodes]: https://github.com/dmulholland/shortcodes
