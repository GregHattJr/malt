---
title: Guide
---

:insert toc


## Command Line Interface

To initialize a new site, create a site directory, `cd` into it, and run the `init` command:

    $ ark init

To build an existing site, run the `build` command from the site directory or any of its subdirectories:

    $ ark build

See the builtin help text for further details of Ark's command line interface:

    $ ark --help

    Usage: ark [FLAGS] [COMMAND]

      Static website generator.

    Flags:
      --help            Print the application's help text and exit.
      --version         Print the application's version number and exit.

    Commands:
      build             Build the current site.
      clear             Clear the output directory.
      edit              Edit an existing record or create a new file.
      init              Initialize a new site directory.
      serve             Run a web server on the site's output directory.
      watch             Monitor the site directory and rebuild on changes.

    Command Help:
      help <command>    Print the specified command's help text and exit.



## Site Structure

Initializing a new site creates the following directory structure:

    site/
        config.py       # site configuration file
        ext/            # extensions directory for plugins
        inc/            # includes directory for menus, etc.
        lib/            # library directory for themes
        out/            # output directory for html files
        src/            # source directory for text files

Ark also creates an empty `.ark` file which it uses to identify the site directory. You can safely commit this file to a version control repository.

In use Ark will generate a `.arkcache` directory for its own use. You can add this directory to your `.gitignore` file or equivalent if your site is stored in a version control repository.



## Records

A record is a text file stored in a site's `src` directory. Ark searches the `src` directory for record files and generates a HTML page in the `out` directory for each one it finds. It can also generate a set of index pages for each directory of records.

Ark has builtin support for record files written in [Markdown][] and [Syntex][]. Files with a `.md` extension are rendered as Markdown, files with a `.stx` extension are rendered as Syntex. Ark can be extended via plugins to support other formats and extensions.

[Markdown]: http://daringfireball.net/projects/markdown/
[Syntex]: https://github.com/dmulholland/syntex

A record file can begin with a [YAML][] header specifying metadata for the record:

[YAML]: http://en.wikipedia.org/wiki/YAML

    ---
    title: My Important Document
    author: John Doe
    date: 2014-07-21
    ---

    Record content begins here.

By default, a record's url slug is generated from its filename, but you can specify a custom slug in the header:

    ---
    slug: my-custom-slug
    ---

Every record has a *type*, determined by its parent `[type]` directory in the site's `src` directory:

    src/
        [pages]/
            my-page.md     # this record is a page
        [posts]/
            my-post.md     # this record is a post

Ark has two builtin record types - *pages* and *posts* - but you can add as many custom types as you like simply by creating new `[type]` directories. Every type can have its own individual set of index and tag index pages.

You can determine the behaviour of your custom types (or alter the behaviour of the builtin types) in your site's `config.py` file. Assuming we'll be devoting a section of our site to sonnets, we may wish to create a custom type just for them. We can do this by adding a `[sonnets]` directory to our site's `src` directory.

    src/
        [sonnets]/
            my-sonnet.md   # this record is a sonnet

New custom types behave, by default, like the builtin *post* type, but we can alter this behaviour by adding a dictionary of type settings to our `config.py` file:

::: python

    sonnets = {                # id corresponding to the [type] directory
        "name": "Sonnets",     # defaults to the titlecased id
        "slug": "sonnets",     # defaults to the slugified id
        "tag_slug": "tags",    # defaults to "tags"
        "indexed": True,       # build directory indexes for this type?
        "order_by": "date",    # order index entries by this attribute
        "reverse": True,       # display index entries in reverse order?
        "per_index": 10,       # number of entries per index page
        "per_tag_index": 10,   # number of entries per tag index page
        "homepage": False,     # use this type's index as the site homepage?
    }

All the settings above are in fact defaults, and in practice we would only need to include those we wished to change.

Within a `[type]` directory, Ark will preserve any directory structure it finds, so you can use subdirectories to organise your record files by category or date. If the record type is indexed, Ark will generate an individual set of index pages for each subdirectory in the tree.

Note that you can store other files and directories in your site's `src` directory and Ark will copy these files untouched to the `out` directory when it builds your site. Ark only searches `[type]` directories for record files so you can safely store, for example, a `robots.txt` file or a directory of images in your `src` directory.



## Record Attributes

A record file's metadata keys are converted to lowercase and spaces are replaced by underscores so the YAML attribute:

    ---
    Date of Birth: 1999-09-09
    ---

will be accessible in template files as `record.date_of_birth`.

All records have the following default attributes:

~ `date`

    A default datetime stamp. If the record has a `date` attribute, this will be used. If not, the file creation time will be used if available (OSX, BSD, Windows), or else the time of the file's last metadata change (Linux).

~ `src`

    The source filepath.

~ `ext`

    The record's file extension, e.g. `md` or `stx`.

~ `html`

    The record's content, rendered into HTML.

~ `slugs`

    A list of output-path slugs.

~ `slug`

    The record's url slug.

~ `text`

    The record's text content.

~ `type`

    The record's type, determined by its parent `[type]` directory.

~ `url`

    The record's URL.



## Tags

Every record can be tagged and every record type supports its own individual set of tag index pages. To tag a record, simply add a `tags` attribute to its header followed by a comma-separated list of tags:

    ---
    tags: foo, bar, baz
    ---



## Links

Ark generates page-relative urls and files with a `.html` extension by default, but you can customize this behaviour to suit your needs.

First, you can specify a root url in your `config.py` file. Use an explicit domain, e.g. `"http://example.com/"`, for absolute urls, or a single forward slash, `"/"`, for site-relative urls.

::: python

    root = "http://example.com/"

Second, you can specify a file extension in your `config.py` file. You can choose an arbitrary file extension, e.g. `".html"`, or pass an empty string, `""`, to use no file extension at all. If you specify a single forward slash, `"/"`, Ark will generate directory-style urls ending in a slash.

::: python

    extension = ".html"

To link to files within your site from records or templates use site-relative urls prefixed by `@root/`, e.g.

    @root/scripts/jquery.js

Ark will automatically rewrite these urls in the appropriate format.

Use two trailing slashes when linking to files generated by Ark itself - this tells Ark to rewrite the ending to suit your extension settings.

    @root/posts/my-post//

Note that you should include the `index` slug when linking to directory or tag indexes:

    @root/posts/index//

Linking to the homepage is a special case: a simple `@root/` will always suffice.



## Includes

The includes directory, `inc`, is intended for snippets of HTML that can be reused on multiple pages throughout your site, e.g. menus or footer links. Source files placed in this folder will be parsed as Markdown or Syntex depending on their extension and the resulting HTML made available for inclusion in theme files via the `inc.<name>` attribute.

For example, a simple menu can be constructed in either Markdown or Syntex using nested lists:

    * [Home](@root/)
    * [About](@root/about//)
    * [Posts](@root/posts/index//)
        * [Cats](@root/posts/cats/index//)
        * [Dogs](@root/posts/dogs/index//)

If the menu above was contained in a file named `menu.md` then the rendered HTML would be available to themes via the `inc.menu` attribute.

Files with a `.html`/`.js`/`.css`/`.txt` extension will have their contents preserved as-is.



## Markdown Options

Ark uses the [Markdown][mddocs] package to render record files with a `.md` extension. You can add a dictionary of keyword arguments for the renderer to your site configuration file via a `markdown` attribute.

For example, to turn on the 'Markdown Extra' extension, add the following snippet to your `config.py` file:

::: python

    markdown = { 'extensions': ['markdown.extensions.extra'] }

See the Markdown package's [documentation][mddocs] for details of its available options.

[mddocs]: https://pythonhosted.org/Markdown/



## Jinja Options

Ark uses the [Jinja2][jinja] package to render template files with a `.jinja` extension. You can add a dictionary of keyword arguments for the Jinja environment to your site configuration file via a `jinja` attribute.

[jinja]: http://jinja.pocoo.org



## Shortcode Options

Ark uses the [Shortcodes][shortcodes] package to process shortcodes in record files. You can add a dictionary of keyword arguments for the shortcode parser to your site configuration file via a `shortcodes` attribute.

[shortcodes]: https://github.com/dmulholland/shortcodes



## Dependencies

Installing Ark via `pip` automatically installs the following libraries:

* [Clio](https://github.com/dmulholland/clio)
* [Ibis](https://github.com/dmulholland/ibis)
* [Jinja](http://jinja.pocoo.org)
* [Markdown](https://pythonhosted.org/Markdown/)
* [Pygments](http://pygments.org/)
* [PyYAML](http://pyyaml.org/)
* [Shortcodes](https://github.com/dmulholland/shortcodes)
* [Syntex](https://github.com/dmulholland/syntex)
